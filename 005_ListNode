// 5.链表
struct  ListNode
{
	int m_nValue;
	ListNode* m_pNext;
};


void addToTail(ListNode** pHead, int value)
{
	ListNode* pNew = new ListNode();
	pNew->m_nValue = value;
	pNew->m_pNext = NULL;

	if (*pHead = NULL)
	{
		*pHead = pNew;
	}
	else
	{
		ListNode* pNode = *pHead;
		while (pNode->m_pNext != NULL)
		{
			pNode = pNode->m_pNext;
		}
		pNode->m_pNext = pNew;
	}
}


void removeNode(ListNode** pHead, int value)
{
	if (pHead == NULL || *pHead == NULL)
	{
		return;
	}

	ListNode* pDeletedNode = NULL;

	if ((*pHead)->m_nValue == value)
	{
		pDeletedNode = *pHead;
		*pHead = (*pHead)->m_pNext;// 改变头指针
	}
	ListNode* pNode = *pHead;// 不改变头指针
	while (pNode->m_pNext != NULL && pNode->m_pNext->m_nValue != value)
	{
		pNode = pNode->m_pNext;
	}
	if (pNode->m_pNext != NULL && pNode->m_pNext->m_nValue == value)
	{
		pDeletedNode = pNode->m_pNext;
		pNode->m_pNext = pNode->m_pNext->m_pNext;
	}
	// pNode->m_pNext == NULL即找不到了，不处理

	// 手动释放内存空间,C++的特色
	if (pDeletedNode != NULL)
	{
		delete pDeletedNode;
		pDeletedNode = NULL;
	}
}


void reversePrintList_WithStack(ListNode* pHead)
{
	std::stack<ListNode*> nodes;
	ListNode* pNode = pHead;
	while (pNode != NULL)
	{
		nodes.push(pNode);
		pNode = pNode->m_pNext;
	}

	while (!nodes.empty())
	{
		printf("%d\t", nodes.top()->m_nValue);
		nodes.pop();
	}
}


void reversePrintList_Recursively(ListNode* pHead)// 递归的缺点是函数调用栈溢出
{
	if (pHead != NULL)
	{
		if (pHead->m_pNext != NULL)
		{
			reversePrintList_Recursively(pHead->m_pNext);
		}
		printf("%d\t", pHead->m_nValue);
	}
}
